//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Osu.Tournament.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Osu.Tournament.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add.
        /// </summary>
        public static string Button_Add {
            get {
                return ResourceManager.GetString("Button_Add", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Connect.
        /// </summary>
        public static string Button_Connect {
            get {
                return ResourceManager.GetString("Button_Connect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete.
        /// </summary>
        public static string Button_Delete {
            get {
                return ResourceManager.GetString("Button_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disconnect.
        /// </summary>
        public static string Button_Disconnect {
            get {
                return ResourceManager.GetString("Button_Disconnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Save.
        /// </summary>
        public static string Button_Save {
            get {
                return ResourceManager.GetString("Button_Save", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The osu!api key is not valid!.
        /// </summary>
        public static string Error_ApiKeyInvalid {
            get {
                return ResourceManager.GetString("Error_ApiKeyInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The beatmap is already in this mappool!.
        /// </summary>
        public static string Error_BeatmapAlreadyInMappool {
            get {
                return ResourceManager.GetString("Error_BeatmapAlreadyInMappool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The beatmap does not exist!.
        /// </summary>
        public static string Error_BeatmapIdNotFound {
            get {
                return ResourceManager.GetString("Error_BeatmapIdNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entered id is not a valid number!.
        /// </summary>
        public static string Error_IdIsNotNumber {
            get {
                return ResourceManager.GetString("Error_IdIsNotNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whoops!.
        /// </summary>
        public static string Error_Title {
            get {
                return ResourceManager.GetString("Error_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Close and try again later.
        /// </summary>
        public static string ErrorView_Close {
            get {
                return ResourceManager.GetString("ErrorView_Close", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to API is not answering :(.
        /// </summary>
        public static string ErrorView_Message {
            get {
                return ResourceManager.GetString("ErrorView_Message", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Check osu!status twitter.
        /// </summary>
        public static string ErrorView_Status {
            get {
                return ResourceManager.GetString("ErrorView_Status", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password.
        /// </summary>
        public static string General_Password {
            get {
                return ResourceManager.GetString("General_Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Username.
        /// </summary>
        public static string General_Username {
            get {
                return ResourceManager.GetString("General_Username", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
        /// </summary>
        public static System.Drawing.Icon Icon {
            get {
                object obj = ResourceManager.GetObject("Icon", resourceCulture);
                return ((System.Drawing.Icon)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;log4net&gt;
        ///    &lt;!-- API appender --&gt;
        ///    &lt;appender name=&quot;osu!api&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;
        ///        &lt;file value=&quot;log/osu!api.log&quot; /&gt;
        ///        &lt;appendToFile value=&quot;true&quot; /&gt;
        ///        &lt;maximumFileSize value=&quot;100KB&quot; /&gt;
        ///        &lt;maxSizeRollBackups value=&quot;2&quot; /&gt;
        ///
        ///        &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;
        ///            &lt;conversionPattern value=&quot;%date{yyyy-MM-dd HH:mm:ss} %-5level - %message%newline&quot; /&gt;
        ///        &lt;/layout&gt;
        ///    &lt;/appender&gt;
        ///
        ///    &lt;!-- Scores appender --&gt;
        ///    &lt;append [rest of string was truncated]&quot;;.
        /// </summary>
        public static string LoggerConfig {
            get {
                return ResourceManager.GetString("LoggerConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mappools.
        /// </summary>
        public static string MainView_Mappools {
            get {
                return ResourceManager.GetString("MainView_Mappools", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string MainView_Options {
            get {
                return ResourceManager.GetString("MainView_Options", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overview.
        /// </summary>
        public static string MainView_Overview {
            get {
                return ResourceManager.GetString("MainView_Overview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Rooms.
        /// </summary>
        public static string MainView_Rooms {
            get {
                return ResourceManager.GetString("MainView_Rooms", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Teams.
        /// </summary>
        public static string MainView_Teams {
            get {
                return ResourceManager.GetString("MainView_Teams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update available, click to download..
        /// </summary>
        public static string MainView_UpdateAvailable {
            get {
                return ResourceManager.GetString("MainView_UpdateAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a beatmap.
        /// </summary>
        public static string MappoolView_AddBeatmap {
            get {
                return ResourceManager.GetString("MappoolView_AddBeatmap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Beatmap could not be deleted because the mappool is used in a room..
        /// </summary>
        public static string MappoolView_DeleteBeatmapErrorMappoolInUse {
            get {
                return ResourceManager.GetString("MappoolView_DeleteBeatmapErrorMappoolInUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Are you sure you want to delete the beatmap?.
        /// </summary>
        public static string MappoolView_DeleteBeatmapMessage {
            get {
                return ResourceManager.GetString("MappoolView_DeleteBeatmapMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete beatmap.
        /// </summary>
        public static string MappoolView_DeleteBeatmapTitle {
            get {
                return ResourceManager.GetString("MappoolView_DeleteBeatmapTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter the beatmap id (Must be a valid number). You can use &apos;;&apos; as a separator.
        /// </summary>
        public static string MappoolView_EnterBeatmapIdMessage {
            get {
                return ResourceManager.GetString("MappoolView_EnterBeatmapIdMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add Beatmap.
        /// </summary>
        public static string MappoolView_EnterBeatmapIdTitle {
            get {
                return ResourceManager.GetString("MappoolView_EnterBeatmapIdTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Admin webhook (needed to enable the feature).
        /// </summary>
        public static string OptionsView_AdminWebhook {
            get {
                return ResourceManager.GetString("OptionsView_AdminWebhook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Click here to get your API key..
        /// </summary>
        public static string OptionsView_ApiHelp {
            get {
                return ResourceManager.GetString("OptionsView_ApiHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to osu!api key (required).
        /// </summary>
        public static string OptionsView_ApiKey {
            get {
                return ResourceManager.GetString("OptionsView_ApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default BO when creating a new room.
        /// </summary>
        public static string OptionsView_BO {
            get {
                return ResourceManager.GetString("OptionsView_BO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time between messages (in ms).
        /// </summary>
        public static string OptionsView_Cooldown {
            get {
                return ResourceManager.GetString("OptionsView_Cooldown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default GameMode for a new room.
        /// </summary>
        public static string OptionsView_GameMode {
            get {
                return ResourceManager.GetString("OptionsView_GameMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General.
        /// </summary>
        public static string OptionsView_General {
            get {
                return ResourceManager.GetString("OptionsView_General", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IRC.
        /// </summary>
        public static string OptionsView_IRC {
            get {
                return ResourceManager.GetString("OptionsView_IRC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IRC password is different from your osu account password. Click here to get your IRC password..
        /// </summary>
        public static string OptionsView_IRCHelp {
            get {
                return ResourceManager.GetString("OptionsView_IRCHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default Mappool for a new room.
        /// </summary>
        public static string OptionsView_Mappool {
            get {
                return ResourceManager.GetString("OptionsView_Mappool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can leave it blank if you want.
        /// </summary>
        public static string OptionsView_MappoolWatermark {
            get {
                return ResourceManager.GetString("OptionsView_MappoolWatermark", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mp timer duration (0 = deactivated).
        /// </summary>
        public static string OptionsView_MpTimer {
            get {
                return ResourceManager.GetString("OptionsView_MpTimer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The mp timer command is triggered after each map played.
        /// </summary>
        public static string OptionsView_MpTimerTooltip {
            get {
                return ResourceManager.GetString("OptionsView_MpTimerTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public channel webhook.
        /// </summary>
        public static string OptionsView_PublicWebhook {
            get {
                return ResourceManager.GetString("OptionsView_PublicWebhook", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Room options.
        /// </summary>
        public static string OptionsView_RoomOptions {
            get {
                return ResourceManager.GetString("OptionsView_RoomOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured during the download, make sure you are running the tool with administrator rights..
        /// </summary>
        public static string Update_NewVersionError {
            get {
                return ResourceManager.GetString("Update_NewVersionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Would you like to download the latest version? The application will close..
        /// </summary>
        public static string Update_NewVersionMessage {
            get {
                return ResourceManager.GetString("Update_NewVersionMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New version available.
        /// </summary>
        public static string Update_NewVersionTitle {
            get {
                return ResourceManager.GetString("Update_NewVersionTitle", resourceCulture);
            }
        }
    }
}
